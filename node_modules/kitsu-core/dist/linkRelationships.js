'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var deattribute = require('./deattribute.js');
var filterIncludes = require('./filterIncludes.js');
require('./error.js');

function link(_ref, included, previouslyLinked) {
  let {
    id,
    type,
    meta
  } = _ref;
  const filtered = filterIncludes.filterIncludes(included, {
    id,
    type
  });
  previouslyLinked[`${type}#${id}`] = filtered;

  if (filtered.relationships) {
    linkRelationships(filtered, included, previouslyLinked);
  }

  if (meta) filtered.meta = meta;
  return deattribute.deattribute(filtered);
}

function linkArray(data, included, key, previouslyLinked) {
  data[key] = {};
  if (data.relationships[key].links) data[key].links = data.relationships[key].links;
  data[key].data = [];

  for (const resource of data.relationships[key].data) {
    const cache = previouslyLinked[`${resource.type}#${resource.id}`];
    data[key].data.push(cache || link(resource, included, previouslyLinked));
  }

  delete data.relationships[key];
}

function linkObject(data, included, key, previouslyLinked) {
  data[key] = {};
  const resource = data.relationships[key].data;
  const cache = previouslyLinked[`${resource.type}#${resource.id}`];
  data[key].data = cache || link(resource, included, previouslyLinked);
  if (data.relationships[key].links) data[key].links = data.relationships[key].links;
  delete data.relationships[key];
}

function linkAttr(data, key) {
  data[key] = {};
  if (data.relationships[key].links) data[key].links = data.relationships[key].links;
  delete data.relationships[key];
}

function linkRelationships(data) {
  let included = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  let previouslyLinked = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  const {
    relationships
  } = data;

  for (const key in relationships) {
    var _relationships$key;

    if (Array.isArray((_relationships$key = relationships[key]) === null || _relationships$key === void 0 ? void 0 : _relationships$key.data)) {
      linkArray(data, included, key, previouslyLinked);
    } else if (relationships[key].data) {
      linkObject(data, included, key, previouslyLinked);
    } else {
      linkAttr(data, key);
    }
  }

  if (Object.keys(relationships || []).length === 0 && typeof relationships === 'object' && !Array.isArray(relationships) && relationships !== null) {
    delete data.relationships;
  }

  return data;
}

exports.linkRelationships = linkRelationships;
